#include <bits/stdc++.h>
using namespace std;

// 재귀적 용법으로 풀어야 하는 경우 절차지향적 사고를 버리고 귀납적으로 생각하자
// k개를 이동시키려면 우선 k-1까지 다른 곳에 옮겨두고 k번째 판을 옮긴 후 다시 k-1까지를 옮겨주면 된다

void func(int a, int b, int n){
    // 원판 개수가 1개일 땐 한번만 수행하면 되므로 그대로 출력
    if(n==1){
        cout<<a<<' '<<b<<"\n";
        return;
    }
    // 원판 개수 - 1개 만큼의 원판을 다른 기둥으로 옮기는 과정
    func(a, 6-a-b, n-1);
    cout<<a<<' '<<b<<"\n";
    // 다른 기둥에 옮겨 놓았던 원판 개수 - 1개 만큼의 원판을 최종 목적 기둥으로 옮기기
    func(6-a-b, b, n-1);
}

int main() {
    ios::sync_with_stdio(0); 
    cin.tie(0);
    
    int k;
    cin>>k;
    // (1<<k)는 비트 연산자
    // K개의 원판을 이동시킬 때 A번 필요하다면
    // K+1개를 옮길 땐 우선 k개 원판을 나머지 기둥으로 A번 옮긴 후
    // K+1번째 원판을 최종 기둥으로 1번 옮긴 후
    // K개의 원판을 다시 최종 기둥으로 A번 옮겨야 하므로 2A+1번이 되는데
    // 시작점이 1이므로 2의 k승 -1이 일반항이 됨
    cout<<(1<<k)-1<<"\n";
    func(1,3,k);
    
    return 0;
}