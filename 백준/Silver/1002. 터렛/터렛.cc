#include <bits/stdc++.h>
using namespace std;

// 점과 점 사이의 거리 공식을 알아야 풀 수 있다;;
// 점과 점 사이의 거리 공식

// i) 두 원이 두 점에서 만나는 경우
//   두 반지름의 합이 두 점 사이의 거리의 합보다 크고, 두 반지름의 차가 두점 사이의 거리의 합보다 작아야 한다. (한 원이 다른 원 안에 있는 경우)

// ii) 두 원이 한 점에서 만나는 경우
//   두 반지름의 합이 두 점 사이의 거리의 합과 같거나 두 반지름의 차가 두 점 사이의 거리의 합과 같다. ( i)와 마찬가지로 한 원이 다른 원 안에 있을 수 있음.)

// iii) 두 원이 만나지 않는 경우
//    i), ii) 케이스의 나머지 케이스들이라고 생각하면 된다.

int main() {
    int n;
    int x1,y1,r1,x2,y2,r2;
    cin >> n;
    for(int i=0; i<n; i++){
    	cin >> x1 >> y1 >> r1 >> x2 >> y2 >> r2;
    	int d = (x2-x1)*(x2-x1) + (y2-y1)*(y2-y1); // 점과 점 사이 공식
    	int r = (r1+r2)*(r1+r2); // 외접
    	int rr = (r1-r2)*(r1-r2); // 내접
    	if(d==0){
            // 두 원이 일치하는 경우이므로, 두 원의 중심과 반지름이 일치하는지를 체크해 주면 된다
            // 일치하면 무한개이므로 -1
    		if(rr==0)
    			cout << "-1" << '\n'; 
            // 안만나는 경우
            // 내부에 포함되는 경우?
    	    else
    		    cout <<"0"<<'\n';
   		}
        // 한 점에서 만나는 경우(내접, 외접)
        // 외접하는 경우에는 두 원의 중심사이의 거리가 두 원의 반지름의 합이어야 하고,
        // 내접하는 경우에는 두 원의 중심사이의 거리가 두 원의 반지름의 차와 같아야 한다.
		else if(d==r || d==rr)
    		cout << "1" << '\n';
        // 두 점에서 만나는 경우
        // 두 원의 중심사이의 거리가 두 원의 반지름의 차보다 크고 합보다는 작아야 한다.
    	else if(rr<d && d<r)
    		cout << "2" << '\n';
        // 안만나는 경우
        // 외부에서 만나지 않는 경우, 내부에 포함되는 경우, 동심원인 경우 등
    	else
    		cout << "0" << '\n';
	}
}